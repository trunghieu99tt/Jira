# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BoardUser {
  id: Float!
  role: BoardUserRole!
  user: User!
  board: Project!
  reportedTasks: [Task!]!
  assignedTasks: [Task!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum BoardUserRole {
  ADMIN
  MEMBER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: Float!
  content: String!
  file: String!
  author: User!
  board: Project!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: Float!
  username: String!
  password: String!
  email: String!
  name: String!
  avatar: String!
  boards: [Project!]!
  boardUsers: [BoardUser!]!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Project {
  id: Int!
  name: String!
  coverPhoto: String!
  privacy: Privacy!
  description: String!
  boardLists: [BoardList!]!
  owner: User!
  boardUsers: [BoardUser!]!
  comments: [Comment!]!
  userCount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Privacy {
  PUBLIC
  PRIVATE
}

type BoardList {
  id: Float!
  name: String!
  board: Project!
  tasks: [Task!]!
}

type Task {
  id: Float!
  name: String!
  description: String!
  reportedBy: BoardUser!
  assignedTo: BoardUser!
  attachments: [Attachment!]!
  boardList: BoardList!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Attachment {
  id: Float!
  file: String!
  task: Task!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  task(id: Int!): Task!
  boards(offset: Int = 0, limit: Int = 20): [Project!]!
  board(id: Int!): Project!
  getBoardUsers(offset: Int = 0, limit: Int = 20, boardId: Int!): [BoardUser!]!
}

type Mutation {
  createBoard(createBoardInput: CreateBoardInput!): Project!
}

input CreateBoardInput {
  name: String!
  coverPhoto: String = ""
  privacy: Int!
  description: String = ""
  ownerId: Int!
}
