# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Attachment {
  id: Float!
  fileId: Float!
  taskId: Int!
  commentId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Float!
  username: String!
  password: String!
  email: String!
  name: String!
  avatarFileId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  avatar: String!
}

type UserOutput {
  id: Int!
  name: String!
  avatar: String!
}

type Comment {
  id: Float!
  content: String!
  userId: Int!
  taskId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
}

type AttachmentOutput {
  id: Int!
  taskId: Int
  fileId: Int!
  name: String!
  type: String!
  createdAt: Int!
  url: String!
}

type TaskUser {
  userId: Int!
  name: String!
  avatar: String!
}

type Task {
  id: Float!
  name: String!
  description: String!
  summary: String!
  priority: Float!
  type: String!
  reporterUserId: Int!
  assigneeUserId: Int!
  projectId: Int!
  boardId: Int!
  listPosition: Int!
  coverPhoto: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  assignee: TaskUser!
  reporter: TaskUser!
  attachments: [AttachmentOutput!]!
}

type BoardTask {
  id: Int!
  name: String!
  priority: Int!
  type: String!
  assigneeAvatar: String!
  assigneeName: String!
  listPosition: Int!
  numberOfAttachments: Int!
  numberOfComments: Int!
  coverPhoto: String!
  updatedAt: DateTime!
}

type Board {
  id: Float!
  name: String!
  projectId: Int!
  tasks: [BoardTask!]!
}

type ProjectUserOutput {
  id: Int!
  userId: Int!
  role: Int!
  name: String!
  avatar: String!
}

type Project {
  id: Int!
  name: String!
  coverPhotoFileId: Int!
  privacy: Privacy!
  description: String!
  ownerUserId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  boards: [Board!]!
  projectUsers: [ProjectUserOutput!]!
  userCount: Float!
  coverPhotoUrl: String!
}

enum Privacy {
  PUBLIC
  PRIVATE
}

type Label {
  id: Float!
  name: String!
  color: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TaskLabelOutput {
  labelId: Int!
  name: String!
  color: String!
}

type Query {
  task(id: Int!): Task!
  searchUsers(search: String!): [UserOutput!]!
  getTaskAttachments(taskId: Int!): [Attachment!]!
  comments(taskId: Int!): [Comment!]!
  projects(offset: Int = 0, limit: Int = 20): [Project!]!
  project(id: Int!): Project!
  board(boardId: Int!): Board!
  taskLabels(taskId: Int!): [TaskLabelOutput!]!
  labels: [Label!]!
}

type Mutation {
  createTask(createTaskInput: CreateTaskInput!): Task!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  createdAttachments(createAttachmentsInput: CreateAttachmentsInput!): [Attachment!]!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateTaskLabels(updateTaskLabelsInput: UpdateTaskLabelsInputDto!): Boolean!
  createLabel(createLabelInput: CreateLabelInputDto!): Label!
}

input CreateTaskInput {
  assigneeUserId: Int!
  boardId: Int!
  description: String = ""
  name: String!
  priority: Int!
  reporterUserId: Int!
  summary: String = ""
  attachmentFileIds: String = ""
  type: String!
  projectId: Int!
}

input UpdateTaskInput {
  id: Int!
  updateType: String!
  newBoardId: Int
  listPosition: Int
  assigneeUserId: Int
  description: String
  priority: Int
  type: String
  name: String
  summary: String
  coverPhoto: String
}

input CreateAttachmentsInput {
  taskId: Int!
  fileIds: [Int!]!
}

input CreateCommentInput {
  taskId: Int!
  content: String!
  userId: Int!
}

input CreateProjectInput {
  name: String!
  coverPhotoFileId: Int
  privacy: Int!
  description: String = ""
  ownerUserId: Int!
  projectUserIds: [Int!] = []
}

input UpdateTaskLabelsInputDto {
  labelId: Int!
  taskId: Int!
}

input CreateLabelInputDto {
  name: String!
  color: String!
}
